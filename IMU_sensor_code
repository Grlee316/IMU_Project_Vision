/*
 * Kevin Brannan
  Combined Funcitonality:
  //DR Interrupt
  Filters
  High Speed I2C
  Raw Data
  

  This example shows the basic settings and functions for retrieving accelerometer
  and gyroscopic data. 
  Please refer to the header file for more possible settings, found here:
  ..\SparkFun_6DoF_ISM330DHCX_Arduino_Library\src\sfe_ism330dhcx_defs.h

  Written by Elias Santistevan @ SparkFun Electronics, August 2022

  Product:

    https://www.sparkfun.com/products/19764

  Repository:

    https://github.com/sparkfun/SparkFun_6DoF_ISM330DHCX_Arduino_Library

  SparkFun code, firmware, and software is released under the MIT 
  License (http://opensource.org/licenses/MIT).
*/

#include <Wire.h>
#include "SparkFun_ISM330DHCX.h"
#include <SparkFun_MMC5983MA_Arduino_Library.h>

/////////////////////////////////////////////////////////////////////
//Magnetometer (from sensor hub example)

// 8 bit addressing is required for the 6DoF
// to communicate with its' external sensors.
#define MAG_ADDR_READ 0x61 // (0x30 << 1) | 1)
#define MAG_ADDR_WRITE 0x60 // (0x30 << 1)

#define MAG_READ_REG 0x00 // Read from 0x00
#define MAG_READ_LEN 0x07 // Read seven times consecutively

// INT_CTRL0 (0x09) - contains the bit to initiate measurement. 
// It must be written before each read and is cleared automatically.
#define MAG_WRITE_REG 0x09 
#define MAG_WRITE_DATA 0x01 // Value to write to INT_CTRL0 

/////////////////////////////////////////////////////////////////////
//ISM330 Accel + Gyro
#define interrupt_pin D0
#define mag_int_pin   D1

//bool writeControlBit(sfe_hub_sensor_settings_t toWrite);

SparkFun_ISM330DHCX myISM; 
SFE_MMC5983MA myMag;

// Structs for X,Y,Z data
sfe_ism_raw_data_t accelData; 
sfe_ism_raw_data_t gyroData; 

//From standalone lib example
volatile bool newDataAvailable = true;
uint32_t rawValueX = 0;
uint32_t rawValueY = 0;
uint32_t rawValueZ = 0;
double normalizedX = 0;
double normalizedY = 0;
double normalizedZ = 0;
double heading = 0;

/*
    //From sensor hub example.
// The settings for the sensor hub have three specific fields.
// In addition there are different settings for reads and writes as
// indicated above. 
sfe_hub_sensor_settings_t readMMC, writeMMC;

// Magnetometer data fields. 
uint8_t shRawData[MAG_READ_LEN] = {};
unsigned int magXVal; 
unsigned int magYVal; 
unsigned int magZVal;

double normalizedX;
double normalizedY;
double normalizedZ;
*/
////////////////////////////////////////////////////////////////

void setup(){
  pinMode(interrupt_pin, INPUT);
/*
  // Sensor hub settings for writing to the magnetometer.
  writeMMC.address = MAG_ADDR_WRITE; 
  writeMMC.subAddress = MAG_WRITE_REG; 
  writeMMC.lenData = MAG_WRITE_DATA; 

  // Sensor hub settings for reading from the magnetometer.
  readMMC.address = MAG_ADDR_READ; 
  readMMC.subAddress = MAG_READ_REG; 
  readMMC.lenData = MAG_READ_LEN; 
*/

  
  Serial.begin(115200);
  Serial.println("Hello");
   
  Wire.begin();
  Wire.setClock(400000);
  
  if( !myISM.begin() ){
    Serial.println("Did not begin.");
    while(1);
  }

  // Reset the device to default settings. This if helpful is you're doing multiple
  // uploads testing different settings. 
 
  myISM.deviceReset();
  myISM.resetSensorHub();

  while( !myISM.getDeviceReset() ){ 
    delay(1);
  } 

  Serial.println("Reset.");
  Serial.println("Applying settings.");
  delay(100);
  
  myISM.setDeviceConfig();
  myISM.setBlockDataUpdate();
  
///////////////////////////////////////////////////////////////////////////
// Configure the interrupt pin for the "Measurement Done" interrupt
    pinMode(mag_int_pin, INPUT);
    //attachInterrupt(digitalPinToInterrupt(mag_int_pin), interruptRoutine, RISING);

    if (myMag.begin() == false)
    {
        Serial.println("MMC5983MA did not respond - check your wiring. Freezing.");
        while (true)
            ;
    }

    myMag.softReset();
    
    Serial.println(myMag.getTemperature());
    
    myMag.setFilterBandwidth(100);
    myMag.setContinuousModeFrequency(10);
    myMag.enableAutomaticSetReset();
    myMag.enableContinuousMode();
    myMag.enableInterrupt();
    // Set our interrupt flag, just in case we missed the rising edge
    newDataAvailable = true;

///////////////////////////////////////////////////////////////////////////
/*
  // Set the number of peripheral sensor to be read by the 6DoF
  myISM.setNumberHubSensors(0);
  // Enable pullup resistors on SDX/SCX
  myISM.setHubPullUps(); 
  // Output data rate for the external sensor
  myISM.setHubODR(ISM_SH_ODR_104Hz);


  // Send control bit to Magnetometer
  writeControlBit(writeMMC);

  // Set read settings for external sensor "zero" (0-3)
  myISM.setHubSensorRead(0, &readMMC);

  // Enable the 6DoF as a controller I2C
  // All configurations to the sensor hub must occur while the controller I2C 
  // bus is powered down.
  myISM.enableSensorI2C(true);
*/
  /////////////////////////////////////////////////////////////////////
  
  // Set the output data rate and precision of the accelerometer
  myISM.setAccelDataRate(ISM_XL_ODR_6667Hz);
  myISM.setAccelFullScale(ISM_8g); 

  // Set the output data rate and precision of the gyroscope
  myISM.setGyroDataRate(ISM_GY_ODR_6667Hz);
  myISM.setGyroFullScale(ISM_500dps); 

  // Turn on the accelerometer's filter and apply settings. 
  myISM.setAccelFilterLP2();
  myISM.setAccelSlopeFilter(ISM_LP_ODR_DIV_100);

  // Turn on the gyroscope's filter and apply settings. 
  myISM.setGyroFilterLP1();
  myISM.setGyroLP1Bandwidth(ISM_MEDIUM);

  // Set the accelerometer's status i.e. the data ready to interrupt one. 
  // Commented out just below is the function to send the data ready
  // to interrupt two. 

  myISM.setAccelStatustoInt1();
  
  //myISM.setAccelStatustoInt2();

  // We can just as easily set the gyroscope's data read signal to either interrupt

  //myISM.setGyroStatustoInt1();
  //myISM.setGyroStatustoInt2();
  
  
  // Uncommenting the function call below will change the interrupt to 
  // active LOW instead of HIGH.

  //myISM.setPinMode();

  // This function call will modify which "events" trigger an interrupt. No 
  // argument has been given, please refer to the datasheet for more 
  // information.

  // myISM.setIntNotification(uint8_t val);
}

void loop(){

  // Check if both gyroscope and accelerometer data is available.
  if( myISM.checkStatus() ){




  //if( digitalRead(interrupt_pin) == HIGH ){
    myISM.getRawAccel(&accelData);
    //myISM.getRawGyro(&gyroData);

    Serial.print(accelData.xData);
    Serial.print("\t");
    Serial.print(accelData.yData);
    Serial.print("\t");
    Serial.println(accelData.zData);

///////////////////////////////////////////////////////////////////////////
/*
    // If you've given the 6DoF the wrong address for the external sensor, this
    // bit will tell you. The zero argument is the external sensor to check (0-3).
    if( myISM.getExternalSensorNack(0) )
      Serial.println("MMC Nacked...");

    // CHeck if the sensor hub is finished. 
    if( myISM.getHubStatus() )
    {

      // Get the data stored in the 6DoF's registers. 
      myISM.readPeripheralSensor(shRawData, (uint8_t)MAG_READ_LEN);

      // Shift raw data
      magXVal = (((uint32_t)shRawData[0]) << 10) | (((uint32_t)shRawData[1]) << 2) | ((((uint32_t)shRawData[6]) >> 6) & 0x03);
      magYVal = (((uint32_t)shRawData[2]) << 10) | (((uint32_t)shRawData [3]) << 2) | ((((uint32_t)shRawData[6]) >> 4) & 0x03);
      magZVal = (((uint32_t)shRawData[4]) << 10) | (((uint32_t)shRawData [5]) << 2) | ((((uint32_t)shRawData[6]) >> 2) & 0x03);     

      // Convert raw data
      normalizedX = (double)magXVal - 131072.0;
      normalizedX = (normalizedX/131072.0) * 8;

      normalizedY = (double)magYVal - 131072.0;
      normalizedY = (normalizedY/131072.0) * 8;

      normalizedZ = (double)magZVal - 131072.0;
      normalizedZ = (normalizedZ/131072.0) * 8;

      // Z axis between magnetometer and acclerometer are opposite. 
      normalizedZ = normalizedZ * (-1); 

      Serial.print("Magnetometer: ");
      Serial.print("X: ");
      Serial.print(normalizedX);
      Serial.print(" ");
      Serial.print("Y: ");
      Serial.print(normalizedY);
      Serial.print(" ");
      Serial.print("Z: ");
      Serial.print(normalizedZ);
      Serial.println("\n");

      // Send another bit to take more measurements
      writeControlBit(writeMMC);
      myISM.setHubSensorRead(0, &readMMC);
      myISM.enableSensorI2C(true);

      // Turn the accelerometer and gyrocope back on.
      myISM.setAccelDataRate(ISM_XL_ODR_104Hz);
      myISM.setGyroDataRate(ISM_GY_ODR_104Hz);


      

    }
*/
  }
//////////////////////////////////////////////////////////////////////////
//if (newDataAvailable == true)
if(digitalRead(mag_int_pin))
    {
        //newDataAvailable = false; // Clear our interrupt flag
        myMag.clearMeasDoneInterrupt(); // Clear the MMC5983 interrupt

        // Read all three channels simultaneously
        // Note: we are calling readFieldsXYZ to read the fields, not getMeasurementXYZ
        // The measurement is already complete, we do not need to start a new one
        myMag.readFieldsXYZ(&rawValueX, &rawValueY, &rawValueZ);

        //Use when the interrupt isnt being used and you want to complete the entire process here.
        //myMag.getMeasurementXYZ(&rawValueX, &rawValueY, &rawValueZ);

        // The magnetic field values are 18-bit unsigned. The zero (mid) point is 2^17 (131072).
        // Normalize each field to +/- 1.0
        normalizedX = (double)rawValueX - 131072.0;
        normalizedX /= 131072.0;
    
        normalizedY = (double)rawValueY - 131072.0;
        normalizedY /= 131072.0;
    
        normalizedZ = (double)rawValueZ - 131072.0;
        normalizedZ /= 131072.0;
    
        // Magnetic north is oriented with the Y axis
        // Convert the X and Y fields into heading using atan2 (Arc Tangent 2)
        heading = atan2(normalizedX, 0 - normalizedY);
    
        // atan2 returns a value between +PI and -PI
        // Convert to degrees
        heading /= PI;
        heading *= 180;
        heading += 180;
    
        Serial.print("Heading: ");
        Serial.println(heading, 1);
    }

  delay(500);
}


/*
void interruptRoutine()
{
    newDataAvailable = true;
}
*/

/*
bool writeControlBit(sfe_hub_sensor_settings_t toWrite)
{

  // Sensors must be off for sensor hub configuration.
  myISM.setAccelDataRate(ISM_XL_ODR_OFF);
  myISM.setGyroDataRate(ISM_GY_ODR_OFF);
  myISM.enableSensorI2C(false);

  // 300us until 6DoF I2C is powered down
  delayMicroseconds(310);

  // Configure a write
  myISM.setHubSensorWrite(&toWrite);
  // Re-enable sensor for write
  myISM.setAccelDataRate(ISM_XL_ODR_104Hz);
  myISM.enableSensorI2C(true);

  // Wait for write to complete
  while( !myISM.getHubStatus() ){
    delay(1);
  }
  
  
  // Turn off sensor
  myISM.enableSensorI2C(false);
  delayMicroseconds(310);

  return true; 

}
*/
